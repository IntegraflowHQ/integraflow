schema {
  query: Query
  mutation: Mutation
}

"""Groups fields and operations into named groups."""
directive @doc(
  """Name of the grouping category"""
  category: String!
) on ENUM | FIELD | FIELD_DEFINITION | INPUT_OBJECT | OBJECT

type Query {
  """
  Return the currently authenticated user.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  viewer: User @doc(category: "Users")

  """
  List of channels for a specific survey.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  channels(
    """The ID of the survey."""
    id: ID!

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): SurveyChannelCountableConnection @doc(category: "Surveys")

  """
  List of questions for a specific survey.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  questions(
    """The ID of the survey."""
    id: ID!

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): SurveyQuestionCountableConnection @doc(category: "Surveys")

  """
  List of the project's surveys.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  surveys(
    """Filtering options for surveys."""
    filter: SurveyFilterInput

    """Sort surveys."""
    sortBy: SurveySortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): SurveyCountableConnection @doc(category: "Surveys")

  """
  List of the project's surveys.
  
  Requires one of the following permissions: AUTHENTICATED_API.
  """
  activeSurveys(
    """Filtering options for surveys."""
    filter: SurveyFilterInput

    """Sort surveys."""
    sortBy: SurveySortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): BaseSurveyCountableConnection @doc(category: "Surveys")

  """
  Look up a survey by ID or slug.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS, AUTHENTICATED_API.
  """
  survey(
    """The ID of the survey."""
    id: ID

    """Slug of the survey."""
    slug: String
  ): Survey @doc(category: "Surveys")

  """Look up a survey by channel ID or link."""
  surveyByChannel(
    """The ID of the channel."""
    id: ID

    """Unique link of the channel."""
    link: String
  ): BaseSurvey @doc(category: "Surveys")

  """
  List of the survey's responses.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  responses(
    """The ID of the survey."""
    id: ID

    """Filtering options for responses."""
    filter: SurveyResponseFilterInput

    """Sort responses."""
    sortBy: SurveyResponseSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): SurveyResponseCountableConnection @doc(category: "Surveys")

  """
  Response insight for a survey.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  responseMetric(
    """The ID of the survey."""
    id: ID!

    """The metric to calculate."""
    metric: SurveyResponseMetricEnum!

    """Date range for filtering responses."""
    date: DateRangeInput

    """Date range for filtering responses."""
    previousDate: DateRangeInput
  ): SurveyResponseMetric @doc(category: "Surveys")

  """
  List of the project's themes.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  themes(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): ProjectThemeCountableConnection @doc(category: "Projects")

  """One specific organization invite."""
  organizationInviteDetails(
    """An invite link for an organization."""
    inviteLink: String!
  ): InviteDetails @doc(category: "Organizations")

  """
  The current organization invite link.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  organizationInviteLink: OrganizationInviteLink @doc(category: "Organizations")

  """
  List of triggered events.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  events(
    """Filter events by the provided values."""
    filter: EventFilterInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): EventCountableConnection @doc(category: "Events")

  """
  List of event's definitions.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  eventDefinitions(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): EventDefinitionCountableConnection @doc(category: "Events")

  """
  List of event's properties.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  eventProperties(
    """
    Filter properties by event. If not provided, all properties for the project will be returned.
    """
    event: String

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): EventPropertyCountableConnection @doc(category: "Events")

  """
  List of event's properties.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  propertiesWithDefinitions(
    """
    Filter properties by event. If not provided, all properties for the project will be returned.
    """
    event: String
  ): [EventPropertyWithDefinition!] @doc(category: "Events")

  """
  List of persons.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  persons(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): PersonCountableConnection @doc(category: "Events")

  """
  List of the property definitions.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  propertyDefinitions(
    """
    Filter definitions by type. If not provided, all property definitions for the project will be returned.
    """
    definitionType: PropertyDefinitionTypeEnum

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): PropertyDefinitionCountableConnection @doc(category: "Events")
  _entities(representations: [_Any]): [_Entity]
  _service: _Service
}

"""Represents user data."""
type User implements Node @doc(category: "Users") {
  """The ID of the user."""
  id: ID!

  """The email address of the user."""
  email: String!

  """The given name of the user."""
  firstName: String!

  """The family name of the user."""
  lastName: String!

  """Determine if the user is a staff admin."""
  isStaff: Boolean!

  """Determine if the user is active."""
  isActive: Boolean!

  """Determine if the user has finished onboarding."""
  isOnboarded: Boolean!

  """
  The current organization of the user.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  organization: Organization

  """
  The current project of the user.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  project: Project

  """
  Organizations the user is part of.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  organizations(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): OrganizationCountableConnection

  """
  Projects the user has access to.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  projects(
    """By which field should the pagination order by."""
    sortBy: ProjectSortingInput

    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): ProjectCountableConnection
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""Represents an organization."""
type Organization implements Node @doc(category: "Organizations") {
  """The ID of the organization."""
  id: ID!

  """Slug of the organization."""
  slug: String!

  """
  Name of the organization.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  name: String!

  """
  Member count
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  memberCount: Int!

  """
  Users associated with the organization.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  members(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): OrganizationMemberCountableConnection

  """
  Projects associated with the organization.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  projects(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): ProjectCountableConnection

  """
  Invites associated with the organization.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  invites(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): OrganizationInviteCountableConnection

  """
  Billing usage of the organization.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  billingUsage: JSONString
}

type OrganizationMemberCountableConnection @doc(category: "Organizations") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [OrganizationMemberCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [OrganizationMember!]!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type OrganizationMemberCountableEdge @doc(category: "Organizations") {
  """The item at the end of the edge."""
  node: OrganizationMember!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents an organization member."""
type OrganizationMember implements Node @doc(category: "Organizations") {
  """The ID of the member."""
  id: ID!

  """The email address of the member."""
  email: String!

  """The given name of the member."""
  firstName: String!

  """The family name of the member."""
  lastName: String!

  """The member role"""
  role: RoleLevel!

  """The time at which the member was created."""
  createdAt: DateTime!

  """The last time at which the member was updated."""
  updatedAt: DateTime!
}

enum RoleLevel {
  MEMBER
  ADMIN
  OWNER
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type ProjectCountableConnection @doc(category: "Projects") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ProjectCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [Project!]!
}

type ProjectCountableEdge @doc(category: "Projects") {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents a project."""
type Project implements Node @doc(category: "Projects") {
  """The ID of the project."""
  id: ID!

  """Name of the project."""
  name: String!

  """API token for project."""
  apiToken: String!

  """Slug of the project."""
  slug: String!

  """Whether the project is private or not."""
  accessControl: Boolean

  """The data required for the onboarding process"""
  hasCompletedOnboardingFor: JSONString

  """The timezone of the project."""
  timezone: String!

  """Organization the project belongs to."""
  organization: Organization!
}

scalar JSONString

type OrganizationInviteCountableConnection @doc(category: "Organizations") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [OrganizationInviteCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [OrganizationInvite!]!
}

type OrganizationInviteCountableEdge @doc(category: "Organizations") {
  """The item at the end of the edge."""
  node: OrganizationInvite!

  """A cursor for use in pagination."""
  cursor: String!
}

"""The organization invite that was created or updated."""
type OrganizationInvite implements Node @doc(category: "Organizations") {
  """The unique identifier of the invite."""
  id: ID!

  """The invitees email address."""
  email: String!

  """First name of the invite."""
  firstName: String

  """The user role that the invitee will receive upon accepting the invite."""
  role: RoleLevel!

  """The time at which the invite was created."""
  createdAt: DateTime!

  """The last time at which the invite was updated."""
  updatedAt: DateTime!

  """If the invite has expired."""
  expired: Boolean!

  """
  The user who created the invitation.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  inviter: User!

  """
  The current project of the user.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  organization: Organization!
}

type OrganizationCountableConnection @doc(category: "Organizations") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [OrganizationCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [Organization!]!
}

type OrganizationCountableEdge @doc(category: "Organizations") {
  """The item at the end of the edge."""
  node: Organization!

  """A cursor for use in pagination."""
  cursor: String!
}

input ProjectSortingInput @doc(category: "Projects") {
  """Specifies the direction in which to sort projects."""
  direction: OrderDirection!

  """Sort projects by the selected field."""
  field: ProjectSortField!
}

enum OrderDirection {
  """Specifies an ascending sort order."""
  ASC

  """Specifies a descending sort order."""
  DESC
}

enum ProjectSortField @doc(category: "Projects") {
  """Sort projects by name."""
  NAME

  """Sort projects by created at."""
  CREATED_AT

  """Sort projects by updated at."""
  UPDATED_AT
}

type SurveyChannelCountableConnection @doc(category: "Surveys") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [SurveyChannelCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [SurveyChannel!]!
}

type SurveyChannelCountableEdge @doc(category: "Surveys") {
  """The item at the end of the edge."""
  node: SurveyChannel!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents a survey channel."""
type SurveyChannel implements Node @doc(category: "Surveys") {
  """The ID of the channel."""
  id: ID!

  """The type of the survey channel"""
  type: SurveyChannelTypeEnum!

  """Unique link to the channel."""
  link: String!

  """The options of the question."""
  triggers: JSONString

  """The settings of the question."""
  conditions: JSONString

  """The settings of the question."""
  settings: JSONString

  """The time at which the channel was created."""
  createdAt: DateTime!

  """For internal purpose."""
  reference: ID

  """
  The project the survey belongs to
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  survey: Survey
}

enum SurveyChannelTypeEnum {
  EMAIL
  LINK
  API
  CUSTOM
  MOBILE_SDK
  WEB_SDK
}

"""Represents a survey."""
type Survey implements Node @doc(category: "Surveys") {
  """The ID of the survey."""
  id: ID!

  """For internal purpose."""
  reference: ID

  """Name of the survey."""
  name: String

  """Slug of the survey."""
  slug: String!

  """The type of the survey"""
  type: SurveyTypeEnum!

  """The status of the survey"""
  status: SurveyStatusEnum!

  """The settings of the survey."""
  settings: JSONString

  """
  The project the survey belongs to
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  project: Project

  """
  The theme of the survey.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  theme: ProjectTheme

  """
  The user who created the theme.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  creator: User!

  """
  The questions in the the survey
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  questions(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): SurveyQuestionCountableConnection!

  """
  The distribution channels supported by the survey
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  channels(
    """Return the elements in the list that come before the specified cursor."""
    before: String

    """Return the elements in the list that come after the specified cursor."""
    after: String

    """
    Retrieve the first n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    first: Int

    """
    Retrieve the last n elements from the list. Note that the system only allows fetching a maximum of 100 objects in a single query.
    """
    last: Int
  ): SurveyChannelCountableConnection!

  """The time at which the survey was created."""
  createdAt: DateTime!

  """The last time at which the survey was updated."""
  updatedAt: DateTime!

  """The statistics of the survey."""
  stats: JSONString
}

enum SurveyTypeEnum {
  SURVEY
  QUIZ
  POLL
  CUSTOM
}

enum SurveyStatusEnum {
  DRAFT
  IN_PROGRESS
  ACTIVE
  PAUSED
  ARCHIVED
  COMPLETED
}

"""Represents a theme."""
type ProjectTheme implements Node @doc(category: "Projects") {
  """The ID of the theme."""
  id: ID!

  """Name of the theme."""
  name: String!

  """The settings of the theme."""
  colorScheme: JSONString

  """The settings of the theme."""
  settings: JSONString

  """For internal purpose."""
  reference: ID

  """
  The project the theme belongs to.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  project: Project!

  """
  The user who created the theme.
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  creator: User!

  """The time at which the invite was created."""
  createdAt: DateTime!

  """The last time at which the invite was updated."""
  updatedAt: DateTime!
}

type SurveyQuestionCountableConnection @doc(category: "Surveys") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [SurveyQuestionCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [SurveyQuestion!]!
}

type SurveyQuestionCountableEdge @doc(category: "Surveys") {
  """The item at the end of the edge."""
  node: SurveyQuestion!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents a question."""
type SurveyQuestion implements Node @doc(category: "Surveys") {
  """The ID of the question."""
  id: ID!

  """Label of the question."""
  label: String!

  """Description of the question."""
  description: String!

  """The type of the question"""
  type: SurveyQuestionTypeEnum!

  """The options of the question."""
  options: JSONString

  """The settings of the question."""
  settings: JSONString

  """The position of the question."""
  orderNumber: Int!

  """The position of the question."""
  maxPath: Int!

  """The time at which the question was created."""
  createdAt: DateTime!

  """For internal purpose."""
  reference: ID

  """
  The project the survey belongs to
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  survey: Survey
}

enum SurveyQuestionTypeEnum {
  SINGLE
  MULTIPLE
  TEXT
  DATE
  CSAT
  CES
  SMILEY_SCALE
  NUMERICAL_SCALE
  RATING
  NPS
  FORM
  BOOLEAN
  CTA
  DROPDOWN
  INTEGRATION
  CUSTOM
}

type SurveyCountableConnection @doc(category: "Surveys") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [SurveyCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [Survey!]!
}

type SurveyCountableEdge @doc(category: "Surveys") {
  """The item at the end of the edge."""
  node: Survey!

  """A cursor for use in pagination."""
  cursor: String!
}

input SurveyFilterInput @doc(category: "Surveys") {
  search: String

  """Filter by type"""
  type: SurveyTypeEnum
  status: SurveyStatusEnum
  startDate: DateRangeInput
  endDate: DateTimeRangeInput
  createdAt: DateRangeInput
  updatedAt: DateTimeRangeInput

  """Filter by ids."""
  ids: [ID!]
}

input DateRangeInput {
  """Start date."""
  gte: Date

  """End date."""
  lte: Date
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

input DateTimeRangeInput {
  """Start date."""
  gte: DateTime

  """End date."""
  lte: DateTime
}

input SurveySortingInput @doc(category: "Surveys") {
  """Specifies the direction in which to sort surveys."""
  direction: OrderDirection!

  """Sort surveys by the selected field."""
  field: SurveySortField!
}

enum SurveySortField @doc(category: "Surveys") {
  """Sort surveys by name."""
  NAME

  """Sort surveys by type."""
  TYPE

  """Sort surveys by status."""
  STATUS

  """Sort surveys by created at."""
  CREATED_AT

  """Sort surveys by last modified at."""
  LAST_MODIFIED_AT
}

type BaseSurveyCountableConnection @doc(category: "Surveys") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [BaseSurveyCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [BaseSurvey!]!
}

type BaseSurveyCountableEdge @doc(category: "Surveys") {
  """The item at the end of the edge."""
  node: BaseSurvey!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents a survey from used by our sdk."""
type BaseSurvey implements Node @doc(category: "Surveys") {
  """The ID of the survey."""
  id: ID!

  """Slug of the survey."""
  slug: String!

  """Name of the survey."""
  name: String

  """The status of the survey"""
  status: SurveyStatusEnum!

  """The settings of the survey."""
  settings: JSONString

  """The theme of the survey."""
  theme: BaseProjectTheme

  """The questions in the the survey"""
  questions: [BaseSurveyQuestion!]!

  """The distribution channels supported by the survey"""
  channels(
    """The type of the distribution channel"""
    channelType: SurveyChannelTypeEnum
  ): [BaseSurveyChannel!]!

  """The project the survey belongs to"""
  project: BaseProject

  """The time at which the survey was created."""
  createdAt: DateTime!

  """The date at which the survey was started."""
  startDate: DateTime

  """The date at which the survey was ended."""
  endDate: DateTime
}

"""Represents a theme."""
type BaseProjectTheme implements Node @doc(category: "Projects") {
  """The ID of the theme."""
  id: ID!

  """Name of the theme."""
  name: String!

  """The settings of the theme."""
  colorScheme: JSONString

  """The settings of the theme."""
  settings: JSONString
}

"""Represents a question."""
type BaseSurveyQuestion implements Node @doc(category: "Surveys") {
  """The ID of the question."""
  id: ID!

  """Label of the question."""
  label: String!

  """Description of the question."""
  description: String!

  """The type of the question"""
  type: SurveyQuestionTypeEnum!

  """The options of the question."""
  options: JSONString

  """The settings of the question."""
  settings: JSONString

  """The position of the question."""
  orderNumber: Int!

  """The position of the question."""
  maxPath: Int!

  """The time at which the question was created."""
  createdAt: DateTime!
}

"""Represents a survey channel."""
type BaseSurveyChannel implements Node @doc(category: "Surveys") {
  """The ID of the channel."""
  id: ID!

  """The type of the survey channel"""
  type: SurveyChannelTypeEnum!

  """Unique link to the channel."""
  link: String!

  """The options of the question."""
  triggers: JSONString

  """The settings of the question."""
  conditions: JSONString

  """The settings of the question."""
  settings: JSONString

  """The time at which the channel was created."""
  createdAt: DateTime!
}

"""Represents a project."""
type BaseProject implements Node @doc(category: "Projects") {
  """The ID of the project."""
  id: ID!

  """Name of the project."""
  name: String!

  """API token for project."""
  apiToken: String!
}

type SurveyResponseCountableConnection @doc(category: "Surveys") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [SurveyResponseCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [SurveyResponse!]!
}

type SurveyResponseCountableEdge @doc(category: "Surveys") {
  """The item at the end of the edge."""
  node: SurveyResponse!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents a survey response."""
type SurveyResponse implements Node @doc(category: "Surveys") {
  """The ID of the response."""
  id: ID!

  """
  The survey the response belongs to
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  survey: Survey

  """The title of the response."""
  title: String!

  """The user attributes."""
  userAttributes: JSONString

  """The response."""
  response: JSONString!

  """The status of the survey response"""
  status: SurveyResponseStatusEnum!

  """The time the survey completed."""
  completedAt: DateTime

  """The time at which the response was created."""
  createdAt: DateTime!

  """The last time at which the response was updated."""
  updatedAt: DateTime!

  """The time spent to complete the survey."""
  timeSpent: Float

  """The statistics of the response."""
  stats: JSONString
}

enum SurveyResponseStatusEnum {
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

input SurveyResponseFilterInput @doc(category: "Surveys") {
  status: SurveyResponseStatusEnum
  createdAt: DateRangeInput

  """Filter by ids."""
  ids: [ID!]
}

input SurveyResponseSortingInput @doc(category: "Surveys") {
  """Specifies the direction in which to sort responses."""
  direction: OrderDirection!

  """Sort responses by the selected field."""
  field: SurveyResponseSortField!
}

enum SurveyResponseSortField @doc(category: "Surveys") {
  """Sort responses by status."""
  STATUS

  """Sort responses by created at."""
  CREATED_AT

  """Sort responses by last modified at."""
  LAST_MODIFIED_AT

  """Sort responses by completed at."""
  COMPLETED_AT

  """Sort responses by time spent."""
  TIME_SPENT
}

"""Represents a survey response metric (e.g. total responses, nps)."""
type SurveyResponseMetric @doc(category: "Surveys") {
  """The current value."""
  current: JSONString

  """The previous value."""
  previous: JSONString
}

enum SurveyResponseMetricEnum {
  TOTAL_RESPONSES
  COMPLETION_RATE
  AVERAGE_TIME
  NPS
  CSAT
  CES
}

type ProjectThemeCountableConnection @doc(category: "Projects") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [ProjectThemeCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [ProjectTheme!]!
}

type ProjectThemeCountableEdge @doc(category: "Projects") {
  """The item at the end of the edge."""
  node: ProjectTheme!

  """A cursor for use in pagination."""
  cursor: String!
}

union InviteDetails = OrganizationInviteDetails | OrganizationInviteLinkDetails

"""The organization invite that was created or updated."""
type OrganizationInviteDetails implements Node @doc(category: "Organizations") {
  """The unique identifier of the invite."""
  id: ID!

  """The invitees email address."""
  email: String!

  """First name of the invite."""
  firstName: String

  """The user role that the invitee will receive upon accepting the invite."""
  role: RoleLevel!

  """The time at which the invite was created."""
  createdAt: DateTime!

  """The last time at which the invite was updated."""
  updatedAt: DateTime!

  """If the invite has expired."""
  expired: Boolean!

  """The name/email of the inviter."""
  inviter: String!

  """The ID of the organization the invite is for."""
  organizationId: ID!

  """The name of the organization the invite is for."""
  organizationName: String!

  """The logo of the organization the invite is for."""
  organizationLogo: String
}

"""The organization invite that was created or updated."""
type OrganizationInviteLinkDetails implements Node @doc(category: "Organizations") {
  """The ID of the object."""
  id: ID!

  """The ID of the organization the invite is for."""
  organizationId: ID!

  """The name of the organization the invite is for."""
  organizationName: String!

  """The logo of the organization the invite is for."""
  organizationLogo: String
}

"""The organization invite link."""
type OrganizationInviteLink @doc(category: "Organizations") {
  """
  The link of the organization the invite is for.
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  inviteLink: String!
}

type EventCountableConnection @doc(category: "Events") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [EventCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [Event!]!
}

type EventCountableEdge @doc(category: "Events") {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents an event."""
type Event implements Node @doc(category: "Events") {
  """The ID of the event."""
  id: ID!

  """
  The project the event belongs to
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  project: Project!

  """The event name"""
  event: String!

  """The event name"""
  distinctId: String!

  """The event properties"""
  properties: JSONString

  """The time the event occurred"""
  timestamp: DateTime

  """The time the event was created"""
  createdAt: DateTime
}

input EventFilterInput @doc(category: "Events") {
  event: String
  events: [String!]
}

type EventDefinitionCountableConnection @doc(category: "Events") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [EventDefinitionCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [EventDefinition!]!
}

type EventDefinitionCountableEdge @doc(category: "Events") {
  """The item at the end of the edge."""
  node: EventDefinition!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents an event definition."""
type EventDefinition implements Node @doc(category: "Events") {
  """The ID of the event definition."""
  id: ID!

  """
  The project the event definition belongs to
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  project: Project!

  """The name of the event definition"""
  name: String!

  """The volume of events in the last 30 rolling days"""
  volume: Int!

  """The time the event was created"""
  createdAt: DateTime

  """The time the event was last seen"""
  lastSeenAt: DateTime
}

type EventPropertyCountableConnection @doc(category: "Events") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [EventPropertyCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [EventProperty!]!
}

type EventPropertyCountableEdge @doc(category: "Events") {
  """The item at the end of the edge."""
  node: EventProperty!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents an event property."""
type EventProperty implements Node @doc(category: "Events") {
  """The ID of the event property."""
  id: ID!

  """
  The project the event property belongs to
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  project: Project!

  """The name of the event"""
  event: String!

  """The property of the event"""
  property: String!
}

"""Represents an event property with definition."""
type EventPropertyWithDefinition @doc(category: "Events") {
  """The name of the event"""
  event: String!

  """The property of the event"""
  property: String!

  """Whether property accepts a numerical value"""
  isNumerical: Boolean!

  """The property type"""
  propertyType: PropertyTypeEnum!
}

enum PropertyTypeEnum {
  Datetime
  String
  Numeric
  Boolean
}

type PersonCountableConnection @doc(category: "Events") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [PersonCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [Person!]!
}

type PersonCountableEdge @doc(category: "Events") {
  """The item at the end of the edge."""
  node: Person!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents a person."""
type Person implements Node @doc(category: "Events") {
  """The ID of the event property."""
  id: ID!

  """
  The project the person belongs to
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  project: Project!

  """The person's uuid"""
  uuid: UUID!

  """The person's attributes"""
  attributes: JSONString

  """The person's distinct ids"""
  distinctIds: [String!]

  """Whether the person has been identified"""
  isIdentified: Boolean!

  """The time the person was created"""
  createdAt: DateTime
}

scalar UUID

type PropertyDefinitionCountableConnection @doc(category: "Events") {
  """Pagination data for this connection."""
  pageInfo: PageInfo!
  edges: [PropertyDefinitionCountableEdge!]!

  """A total count of items in the collection."""
  totalCount: Int
  nodes: [PropertyDefinition!]!
}

type PropertyDefinitionCountableEdge @doc(category: "Events") {
  """The item at the end of the edge."""
  node: PropertyDefinition!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represents a property definition."""
type PropertyDefinition implements Node @doc(category: "Events") {
  """The ID of the event property."""
  id: ID!

  """
  The project the person belongs to
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  project: Project!

  """The name of the property definition"""
  name: String!

  """Whether property accepts a numerical value"""
  isNumerical: Boolean!

  """The type of the property definition"""
  type: PropertyDefinitionTypeEnum!

  """The property type"""
  propertyType: PropertyTypeEnum!
}

enum PropertyDefinitionTypeEnum {
  EVENT
  PERSON
  GROUP
}

type Mutation {
  """Authenticates a user account via email and authentication token."""
  emailTokenUserAuth(
    """The email which to login via the magic login code."""
    email: String!

    """An optional invite link for an organization."""
    inviteLink: String

    """The magic login code."""
    token: String!
  ): EmailTokenUserAuth @doc(category: "Authentication")

  """
  Finds or creates a new user account by email and sends an email with token.
  """
  emailUserAuthChallenge(
    """The email for which to generate the magic login code."""
    email: String!

    """An optional invite link for an organization."""
    inviteLink: String
  ): EmailUserAuthChallenge @doc(category: "Authentication")

  """Finds or creates a new user account from google auth credentials."""
  googleUserAuth(
    """Code gotten from google auth consent screen."""
    code: String!

    """An optional invite link for an organization."""
    inviteLink: String
  ): GoogleUserAuth @doc(category: "Authentication")

  """
  Deactivate all JWT tokens of the currently authenticated user. 
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  logout: Logout @doc(category: "Authentication")

  """
  Refresh JWT token. Mutation tries to take refreshToken from the input. If it fails it will try to take `refreshToken` from the http-only cookie `refreshToken`. `csrfToken` is required when `refreshToken` is provided as a cookie.
  """
  tokenRefresh(
    """
    CSRF token required to refresh token. This argument is required when `refreshToken` is provided as a cookie.
    """
    csrfToken: String

    """Refresh token."""
    refreshToken: String
  ): RefreshToken @doc(category: "Authentication")

  """
  Updates a user. 
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  userUpdate(
    """A partial object to update the user with."""
    input: UserInput!
  ): UserUpdate @doc(category: "Authentication")

  """
  Creates a new distibution channel 
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  surveyChannelCreate(
    """The channel object to create."""
    input: SurveyChannelCreateInput!
  ): SurveyChannelCreate @doc(category: "Surveys")

  """
  Deletes a channel. 
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  surveyChannelDelete(
    """ID of a channel to delete."""
    id: ID!
  ): SurveyChannelDelete @doc(category: "Surveys")

  """
  Updates a channel 
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  surveyChannelUpdate(
    """ID of a channel to update."""
    id: ID!

    """A partial object to update the channel with."""
    input: SurveyChannelUpdateInput!
  ): SurveyChannelUpdate @doc(category: "Surveys")

  """
  Creates a new survey 
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  surveyCreate(
    """The survey object to create."""
    input: SurveyCreateInput!
  ): SurveyCreate @doc(category: "Surveys")

  """
  Deletes a survey. 
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  surveyDelete(
    """ID of a survey to delete."""
    id: ID!
  ): SurveyDelete @doc(category: "Surveys")

  """
  Creates a new question 
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  surveyQuestionCreate(
    """The question object to create."""
    input: SurveyQuestionCreateInput!
  ): SurveyQuestionCreate @doc(category: "Surveys")

  """
  Deletes a question. 
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  surveyQuestionDelete(
    """ID of a question to delete."""
    id: ID!
  ): SurveyQuestionDelete @doc(category: "Surveys")

  """
  Updates a question 
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  surveyQuestionUpdate(
    """ID of a question to update."""
    id: ID!

    """A partial object to update the question with."""
    input: SurveyQuestionUpdateInput!
  ): SurveyQuestionUpdate @doc(category: "Surveys")

  """Creates a response to survey."""
  surveyResponseCreate(
    """The details for the response to create."""
    input: SurveyResponseCreateInput!
  ): SurveyResponseCreate @doc(category: "Surveys")

  """Updates a response."""
  surveyResponseUpdate(
    """The ID of the response."""
    id: ID!

    """The partial response object to update"""
    input: SurveyResponseUpdateInput!
  ): SurveyResponseUpdate @doc(category: "Surveys")

  """
  Updates a survey 
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  surveyUpdate(
    """ID of a survey to update."""
    id: ID!

    """A partial object to update the survey with."""
    input: SurveyUpdateInput!
  ): SurveyUpdate @doc(category: "Surveys")

  """Creates a new project"""
  projectCreate(
    """The project object to create."""
    input: ProjectCreateInput!
  ): ProjectCreate @doc(category: "Projects")

  """
  Creates a new theme 
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  projectThemeCreate(
    """The theme object to create."""
    input: ProjectThemeCreateInput!
  ): ProjectThemeCreate @doc(category: "Projects")

  """
  Deletes a theme. 
  
  Requires one of the following permissions: PROJECT_ADMIN_ACCESS.
  """
  projectThemeDelete(
    """ID of a theme to delete."""
    id: ID!
  ): ProjectThemeDelete @doc(category: "Projects")

  """
  Updates an existing theme 
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  projectThemeUpdate(
    """ID of a theme to update."""
    id: ID!

    """The theme object to create."""
    input: ProjectThemeUpdateInput!
  ): ProjectThemeUpdate @doc(category: "Projects")

  """
  Updates a project token. 
  
  Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
  """
  projectTokenReset: ProjectTokenReset @doc(category: "Projects")

  """Updates a project."""
  projectUpdate(
    """A partial object to update the project with."""
    input: ProjectUpdateInput!
  ): ProjectUpdate @doc(category: "Projects")

  """
  Creates new organization. 
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  organizationCreate(
    """Organization details for the new organization."""
    input: OrganizationCreateInput!

    """Onboarding survey."""
    survey: OnboardingCustomerSurvey
  ): OrganizationCreate @doc(category: "Organizations")

  """
  Creates a new organization invite. 
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  organizationInviteCreate(
    """The organization invite object to create."""
    input: OrganizationInviteCreateInput!
  ): OrganizationInviteCreate @doc(category: "Organizations")

  """
  Deletes an organization invite. 
  
  Requires one of the following permissions: ORGANIZATION_ADMIN_ACCESS.
  """
  organizationInviteDelete(
    """The identifier of the invite to delete."""
    id: ID!
  ): OrganizationInviteDelete @doc(category: "Organizations")

  """
  Reset the current organization invite link.. 
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  organizationInviteLinkReset: OrganizationInviteLinkReset @doc(category: "Organizations")

  """
  Resend an existing invite 
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  organizationInviteResend(
    """ID of a invite to resend."""
    id: ID!
  ): OrganizationInviteResend @doc(category: "Organizations")

  """
  Joins an organization 
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  organizationJoin(
    """Organization details for the new organization."""
    input: OrganizationJoinInput!
  ): OrganizationJoin @doc(category: "Organizations")

  """
  Leaves an organization. 
  
  Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
  """
  organizationLeave(
    """ID of the organization to leave."""
    id: ID!
  ): OrganizationLeave @doc(category: "Organizations")

  """
  Deletes a member from an organization. 
  
  Requires one of the following permissions: ORGANIZATION_ADMIN_ACCESS.
  """
  organizationMemberLeave(
    """ID of the member to leave an organization."""
    id: ID!
  ): OrganizationMemberLeave @doc(category: "Organizations")

  """
  Updates an organization member. 
  
  Requires one of the following permissions: ORGANIZATION_ADMIN_ACCESS.
  """
  organizationMemberUpdate(
    """ID of the member to update."""
    id: ID!

    """A partial object to update the organization member with."""
    input: OrganizationMemberUpdateInput!
  ): OrganizationMemberUpdate @doc(category: "Organizations")

  """
  Updates an organization. 
  
  Requires one of the following permissions: ORGANIZATION_ADMIN_ACCESS.
  """
  organizationUpdate(
    """A partial object to update the organization with."""
    input: OrganizationUpdateInput!
  ): OrganizationUpdate @doc(category: "Organizations")

  """Captures event."""
  eventCapture(
    """Onboarding survey."""
    batch: [EventCaptureInput!]

    """Organization details for the new organization."""
    input: EventCaptureInput

    """The time the event(s) is/are sent."""
    sentAt: DateTime
  ): EventCapture @doc(category: "Events")
}

"""Authenticates a user account via email and authentication token."""
type EmailTokenUserAuth @doc(category: "Authentication") {
  """Access token to authenticate the user."""
  token: String

  """JWT refresh token, required to re-generate access token."""
  refreshToken: String

  """CSRF token required to re-generate access token."""
  csrfToken: String

  """A user that has access to the the resources of an organization."""
  user: AuthUser
  userErrors: [UserError!]!
  errors: [UserError!]!
}

"""Represents an authenticated user data."""
type AuthUser implements Node @doc(category: "Users") {
  """The ID of the user."""
  id: ID!

  """The email address of the user."""
  email: String!

  """The given name of the user."""
  firstName: String!

  """The family name of the user."""
  lastName: String!

  """Determine if the user is a staff admin."""
  isStaff: Boolean!

  """Determine if the user is active."""
  isActive: Boolean!

  """Determine if the user has finished onboarding."""
  isOnboarded: Boolean!

  """
  The current organization of the user.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  organization: AuthOrganization

  """
  The current project of the user.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  project: Project
}

"""Represents an organization."""
type AuthOrganization implements Node @doc(category: "Organizations") {
  """The ID of the organization."""
  id: ID!

  """Slug of the organization."""
  slug: String!

  """
  Name of the organization.
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  name: String!

  """
  Member count
  
  Requires one of the following permissions: AUTHENTICATED_USER.
  """
  memberCount: Int!
}

"""Represents errors in user mutations."""
type UserError @doc(category: "Users") {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: UserErrorCode!
}

"""An enumeration."""
enum UserErrorCode @doc(category: "Users") {
  GRAPHQL_ERROR
  INACTIVE
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  INVALID_MAGIC_CODE
  MAGIC_CODE_EXPIRED
  JWT_SIGNATURE_EXPIRED
  JWT_INVALID_TOKEN
  JWT_DECODE_ERROR
  JWT_MISSING_TOKEN
  JWT_INVALID_CSRF_TOKEN
}

"""
Finds or creates a new user account by email and sends an email with token.
"""
type EmailUserAuthChallenge @doc(category: "Authentication") {
  """Whether the operation was successful."""
  success: Boolean

  """Supported challenge for this user."""
  authType: String
  userErrors: [UserError!]!
  errors: [UserError!]!
}

"""Finds or creates a new user account from google auth credentials."""
type GoogleUserAuth @doc(category: "Authentication") {
  """Whether the operation was successful."""
  success: Boolean

  """Access token to authenticate the user."""
  token: String

  """JWT refresh token, required to re-generate access token."""
  refreshToken: String

  """CSRF token required to re-generate access token."""
  csrfToken: String

  """A user that has access to the the resources of an organization."""
  user: AuthUser
  userErrors: [UserError!]!
  errors: [UserError!]!
}

"""
Deactivate all JWT tokens of the currently authenticated user. 

Requires one of the following permissions: AUTHENTICATED_USER.
"""
type Logout @doc(category: "Authentication") {
  userErrors: [UserError!]!
  errors: [UserError!]!
}

"""
Refresh JWT token. Mutation tries to take refreshToken from the input. If it fails it will try to take `refreshToken` from the http-only cookie `refreshToken`. `csrfToken` is required when `refreshToken` is provided as a cookie.
"""
type RefreshToken @doc(category: "Authentication") {
  """Acess token to authenticate the user."""
  token: String
  userErrors: [UserError!]!
  errors: [UserError!]!
}

"""
Updates a user. 

Requires one of the following permissions: AUTHENTICATED_USER.
"""
type UserUpdate @doc(category: "Authentication") {
  userErrors: [UserError!]!
  errors: [UserError!]!
  user: User
}

input UserInput @doc(category: "Authentication") {
  """The given name of the user."""
  firstName: String

  """The family name of the user."""
  lastName: String

  """Determine if the user has finished onboarding."""
  isOnboarded: Boolean

  """The avatar of the user."""
  avatar: String
}

"""
Creates a new distibution channel 

Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
"""
type SurveyChannelCreate @doc(category: "Surveys") {
  """The checkout with the added gift card or voucher."""
  surveyChannel: SurveyChannel
  surveyErrors: [SurveyError!]!
  errors: [SurveyError!]!
}

"""Represents errors in survey mutations."""
type SurveyError @doc(category: "Surveys") {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: SurveyErrorCode!
}

"""An enumeration."""
enum SurveyErrorCode @doc(category: "Surveys") {
  GRAPHQL_ERROR
  INACTIVE
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input SurveyChannelCreateInput @doc(category: "Surveys") {
  """The type of the distribution channel"""
  type: SurveyChannelTypeEnum

  """The triggers for the channel."""
  triggers: JSONString

  """The conditions for the channel."""
  conditions: JSONString

  """The settings of the channel."""
  settings: JSONString

  """The id of the channel."""
  id: UUID

  """The survey ID the channel belongs to."""
  surveyId: ID!
}

"""
Deletes a channel. 

Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
"""
type SurveyChannelDelete @doc(category: "Surveys") {
  surveyErrors: [SurveyError!]!
  errors: [SurveyError!]!
  surveyChannel: SurveyChannel
}

"""
Updates a channel 

Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
"""
type SurveyChannelUpdate @doc(category: "Surveys") {
  surveyErrors: [SurveyError!]!
  errors: [SurveyError!]!
  surveyChannel: SurveyChannel
}

input SurveyChannelUpdateInput @doc(category: "Surveys") {
  """The type of the distribution channel"""
  type: SurveyChannelTypeEnum

  """The triggers for the channel."""
  triggers: JSONString

  """The conditions for the channel."""
  conditions: JSONString

  """The settings of the channel."""
  settings: JSONString
}

"""
Creates a new survey 

Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
"""
type SurveyCreate @doc(category: "Surveys") {
  surveyErrors: [SurveyError!]!
  errors: [SurveyError!]!
  survey: Survey
}

input SurveyCreateInput @doc(category: "Surveys") {
  """The name of the survey."""
  name: String

  """The slug of the survey."""
  slug: String

  """The type of the survey"""
  type: SurveyTypeEnum

  """The status of the survey"""
  status: SurveyStatusEnum

  """The settings of the survey."""
  settings: JSONString

  """The theme of the survey."""
  themeId: ID

  """The id of the survey."""
  id: UUID
}

"""
Deletes a survey. 

Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
"""
type SurveyDelete @doc(category: "Surveys") {
  surveyErrors: [SurveyError!]!
  errors: [SurveyError!]!
  survey: Survey
}

"""
Creates a new question 

Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
"""
type SurveyQuestionCreate @doc(category: "Surveys") {
  surveyErrors: [SurveyError!]!
  errors: [SurveyError!]!
  surveyQuestion: SurveyQuestion
}

input SurveyQuestionCreateInput @doc(category: "Surveys") {
  """The label of the question."""
  label: String

  """The description of the question."""
  description: String

  """The type of the question"""
  type: SurveyQuestionTypeEnum

  """The settings of the question."""
  settings: JSONString

  """The options of the question."""
  options: JSONString

  """The settings of the question."""
  orderNumber: Int!

  """The id of the question."""
  id: UUID

  """The survey ID the question belongs to."""
  surveyId: ID!
}

"""
Deletes a question. 

Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
"""
type SurveyQuestionDelete @doc(category: "Surveys") {
  surveyErrors: [SurveyError!]!
  errors: [SurveyError!]!
  surveyQuestion: SurveyQuestion
}

"""
Updates a question 

Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
"""
type SurveyQuestionUpdate @doc(category: "Surveys") {
  surveyErrors: [SurveyError!]!
  errors: [SurveyError!]!
  surveyQuestion: SurveyQuestion
}

input SurveyQuestionUpdateInput @doc(category: "Surveys") {
  """The label of the question."""
  label: String

  """The description of the question."""
  description: String

  """The type of the question"""
  type: SurveyQuestionTypeEnum

  """The settings of the question."""
  settings: JSONString

  """The options of the question."""
  options: JSONString

  """The settings of the question."""
  orderNumber: Int
}

"""Creates a response to survey."""
type SurveyResponseCreate @doc(category: "Surveys") {
  """The ID of the response."""
  responseId: ID

  """Whether the operation was successful."""
  status: Boolean
  surveyErrors: [SurveyError!]!
  errors: [SurveyError!]!
}

input SurveyResponseCreateInput @doc(category: "Surveys") {
  """The partial response for the survey."""
  response: JSONString

  """The time the survey started."""
  startedAt: DateTime

  """Whether the response is completed."""
  completed: Boolean = false

  """The time the survey completed."""
  completedAt: DateTime

  """The user distinct ID."""
  userId: ID

  """The event ID."""
  event: UUID

  """The channel of the response."""
  channel: JSONString

  """The response metadata."""
  metadata: JSONString

  """The user attributes."""
  attributes: JSONString

  """The ID of the response."""
  id: UUID

  """The survey ID the response belongs to."""
  surveyId: ID!
}

"""Updates a response."""
type SurveyResponseUpdate @doc(category: "Surveys") {
  """Whether the operation was successful."""
  status: Boolean
  surveyErrors: [SurveyError!]!
  errors: [SurveyError!]!
}

input SurveyResponseUpdateInput @doc(category: "Surveys") {
  """The partial response for the survey."""
  response: JSONString

  """The time the survey started."""
  startedAt: DateTime

  """Whether the response is completed."""
  completed: Boolean = false

  """The time the survey completed."""
  completedAt: DateTime

  """The user distinct ID."""
  userId: ID

  """The event ID."""
  event: UUID

  """The channel of the response."""
  channel: JSONString

  """The response metadata."""
  metadata: JSONString

  """The user attributes."""
  attributes: JSONString
}

"""
Updates a survey 

Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
"""
type SurveyUpdate @doc(category: "Surveys") {
  surveyErrors: [SurveyError!]!
  errors: [SurveyError!]!
  survey: Survey
}

input SurveyUpdateInput @doc(category: "Surveys") {
  """The name of the survey."""
  name: String

  """The slug of the survey."""
  slug: String

  """The type of the survey"""
  type: SurveyTypeEnum

  """The status of the survey"""
  status: SurveyStatusEnum

  """The settings of the survey."""
  settings: JSONString

  """The theme of the survey."""
  themeId: ID
}

"""Creates a new project"""
type ProjectCreate @doc(category: "Projects") {
  projectErrors: [ProjectError!]!
  errors: [ProjectError!]!
  project: Project
}

"""Represents errors in project mutations."""
type ProjectError @doc(category: "Projects") {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: ProjectErrorCode!
}

"""An enumeration."""
enum ProjectErrorCode @doc(category: "Projects") {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  INVALID_PERMISSION
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input ProjectCreateInput @doc(category: "Projects") {
  """The name of the project."""
  name: String!

  """The timezone of the project."""
  timezone: String

  """Whether the project is private or not."""
  private: Boolean

  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: UUID
}

"""
Creates a new theme 

Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
"""
type ProjectThemeCreate @doc(category: "Projects") {
  projectErrors: [ProjectError!]!
  errors: [ProjectError!]!
  projectTheme: ProjectTheme
}

input ProjectThemeCreateInput @doc(category: "Projects") {
  """The name of the theme."""
  name: String!

  """The color scheme of the theme."""
  colorScheme: JSONString

  """The id of the theme."""
  id: UUID
}

"""
Deletes a theme. 

Requires one of the following permissions: PROJECT_ADMIN_ACCESS.
"""
type ProjectThemeDelete @doc(category: "Projects") {
  projectErrors: [ProjectError!]!
  errors: [ProjectError!]!
  projectTheme: ProjectTheme
}

"""
Updates an existing theme 

Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
"""
type ProjectThemeUpdate @doc(category: "Projects") {
  projectErrors: [ProjectError!]!
  errors: [ProjectError!]!
  projectTheme: ProjectTheme
}

input ProjectThemeUpdateInput @doc(category: "Projects") {
  """The name of the theme."""
  name: String

  """The color scheme of the theme."""
  colorScheme: JSONString
}

"""
Updates a project token. 

Requires one of the following permissions: PROJECT_MEMBER_ACCESS.
"""
type ProjectTokenReset @doc(category: "Projects") {
  """The project the token belongs to"""
  project: Project!
  projectErrors: [ProjectError!]!
  errors: [ProjectError!]!
}

"""Updates a project."""
type ProjectUpdate @doc(category: "Projects") {
  projectErrors: [ProjectError!]!
  errors: [ProjectError!]!
  project: Project
}

input ProjectUpdateInput @doc(category: "Projects") {
  """The name of the project."""
  name: String

  """The timezone of the project."""
  timezone: String

  """Whether the project is private or not."""
  private: Boolean

  """The icon of the project."""
  icon: String

  """The data required for the onboarding process."""
  hasCompletedOnboardingFor: JSONString
}

"""
Creates new organization. 

Requires one of the following permissions: AUTHENTICATED_USER.
"""
type OrganizationCreate @doc(category: "Organizations") {
  """
  An organization. Organizations are root-level objects that contain users and projects.
  """
  organization: Organization

  """A user that has access to the the resources of an organization."""
  user: AuthUser
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
}

"""Represents errors in organization mutations."""
type OrganizationError @doc(category: "Organizations") {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: OrganizationErrorCode!
}

"""An enumeration."""
enum OrganizationErrorCode @doc(category: "Organizations") {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input OrganizationCreateInput @doc(category: "Organizations") {
  """The name of the organization."""
  name: String!

  """The slug of the organization."""
  slug: String!

  """The timezone of the organization, passed in by client."""
  timezone: String!
}

input OnboardingCustomerSurvey @doc(category: "Organizations") {
  """Your role in your company"""
  companyRole: String

  """Size of your company"""
  companySize: String
}

"""
Creates a new organization invite. 

Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
"""
type OrganizationInviteCreate @doc(category: "Organizations") {
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
  organizationInvite: OrganizationInvite
}

input OrganizationInviteCreateInput @doc(category: "Organizations") {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: UUID

  """The email of the invitee."""
  email: String!

  """The message to send to the invitee."""
  message: String

  """What member role the invite should grant."""
  role: RoleLevel = 1
}

"""
Deletes an organization invite. 

Requires one of the following permissions: ORGANIZATION_ADMIN_ACCESS.
"""
type OrganizationInviteDelete @doc(category: "Organizations") {
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
  organizationInvite: OrganizationInvite
}

"""
Reset the current organization invite link.. 

Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
"""
type OrganizationInviteLinkReset @doc(category: "Organizations") {
  """The current organization invite link."""
  inviteLink: String

  """Whether the operation was successful."""
  success: Boolean
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
}

"""
Resend an existing invite 

Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
"""
type OrganizationInviteResend @doc(category: "Organizations") {
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
  organizationInvite: OrganizationInvite
}

"""
Joins an organization 

Requires one of the following permissions: AUTHENTICATED_USER.
"""
type OrganizationJoin @doc(category: "Organizations") {
  """A user that has access to the the resources of an organization."""
  user: AuthUser!
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
}

input OrganizationJoinInput @doc(category: "Organizations") {
  """An invite link for an organization."""
  inviteLink: String!
}

"""
Leaves an organization. 

Requires one of the following permissions: ORGANIZATION_MEMBER_ACCESS.
"""
type OrganizationLeave @doc(category: "Organizations") {
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
  organization: Organization
}

"""
Deletes a member from an organization. 

Requires one of the following permissions: ORGANIZATION_ADMIN_ACCESS.
"""
type OrganizationMemberLeave @doc(category: "Organizations") {
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
  organizationMembership: OrganizationMember
}

"""
Updates an organization member. 

Requires one of the following permissions: ORGANIZATION_ADMIN_ACCESS.
"""
type OrganizationMemberUpdate @doc(category: "Organizations") {
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
  organizationMembership: OrganizationMember
}

input OrganizationMemberUpdateInput @doc(category: "Organizations") {
  """What member role to grant."""
  role: RoleLevel = 1
}

"""
Updates an organization. 

Requires one of the following permissions: ORGANIZATION_ADMIN_ACCESS.
"""
type OrganizationUpdate @doc(category: "Organizations") {
  organizationErrors: [OrganizationError!]!
  errors: [OrganizationError!]!
  organization: Organization
}

input OrganizationUpdateInput @doc(category: "Organizations") {
  """The name of the organization."""
  name: String

  """The slug of the organization."""
  slug: String

  """The timezone of the organization, passed in by client."""
  timezone: String
}

"""Captures event."""
type EventCapture @doc(category: "Events") {
  """Whether the operation was successful."""
  status: Boolean
  eventErrors: [EventError!]!
  errors: [EventError!]!
}

"""Represents errors in event mutations."""
type EventError @doc(category: "Events") {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """The error message."""
  message: String

  """The error code."""
  code: EventErrorCode!
}

"""An enumeration."""
enum EventErrorCode {
  FORBIDDEN
  GRAPHQL_ERROR
  INVALID
}

input EventCaptureInput @doc(category: "Events") {
  """The name of the event."""
  event: String!

  """The event payload ID."""
  uuid: UUID

  """The user distinct ID."""
  userId: ID

  """The event properties."""
  properties: JSONString

  """The user attributes."""
  attributes: JSONString

  """The time the event happened"""
  timestamp: DateTime!
}

"""_Any value scalar as defined by Federation spec."""
scalar _Any

"""_Entity union as defined by Federation spec."""
union _Entity = AuthUser | User

"""_Service manifest as defined by Federation spec."""
type _Service {
  sdl: String
}
